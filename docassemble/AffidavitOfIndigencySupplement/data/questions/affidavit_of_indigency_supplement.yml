---
include:
  - docassemble.AssemblyLine:assembly_line.yml
  - docassemble.ALMassachusetts:al_massachusetts.yml
  - docassemble.MassAccess:massaccess.yml
  - docassemble.ALToolbox:al_income.yml
---
imports:
  - decimal
---
metadata:
  title: |
    Supplement to the Affidavit of Indigency
  short title: |
    Affidavit of Indigency Supplement
  tags:
    - BE-04-00-00-00
    - MO-00-00-00-00
  authors:
    - Bryce Willey
    - Samuel Roth
---
mandatory: True
comment: |
  Global interview metadata
variable name: interview_metadata["affidavit_to_indigency_supplement"]
data:
  al_weaver_version: "playground"
  generated on: "2022-08-23"
  title: >-
    Supplement to the Affidavit of Indigency
  short title: >-
    Affidavit of Indigency Supplement
  description: |-
    A supplement to the Affidavit of Indigency, giving the court detailed information about finances
  original_form: >-
    https://www.mass.gov/doc/supplement-to-the-affidavit-of-indigency/download
  allowed courts: 
    - "Boston Municipal Court"
    - "District Court"
    - "Housing Court"
    - "Juvenile Court"
    - "Land Court"
    - "Probate and Family Court"
    - "Superior Court"
  categories:
    - "MO-00-00-00-00"
    - "BE-04-00-00-00"
  typical role: "unknown"
  generate download screen: True
---
code: |
  interview_metadata['main_interview_key'] =  'affidavit_to_indigency_supplement'
---
code: |
  # This controls the default country and list of states in address field questions
  AL_DEFAULT_COUNTRY = "US"
---
code: |
  # This controls the default state in address field questions
  AL_DEFAULT_STATE = "MA"
---
code: |
  github_repo_name =  'docassemble-AffidavitToIndigencySupplement'
---
code: |
  interview_short_title = "File a Supplement to the Affidavit of Indigency"
---
code: |
  al_form_type = "existing_case" 
---
objects:
  - users: ALPeopleList.using(ask_number=True,target_number=1)
---
objects:
  - users[i].jobs: ALItemizedJobList.using(
      complete_attribute='complete',
      object_type=ALItemizedJob.using(employer_type=ALIndividual),
      ask_number=True)
  - users[i].nonemployment: ALIncomeList.using(auto_gather=False)
  - users[i].household: ALPersonList
  - users[i].expenses: ALItemizedValueDict.using(complete_attribute="exists")
  - users[i].accounts: ALAssetList.using(complete_attribute='complete',
      ask_number=True)
---
id: loop start bank accounts
question: |
 Do you have any bank accounts that you wish to disclose?
subquestion: |
  For example: money market accounts, investment accounts etc. 
yesno: users[0].account.there_are_any
---
code: |
  nonemployment_description = comma_and_list([other.name.text + "\r" for other in users[0].nonemployment])
---
id: another account
question: |
  Are there any other accounts that you wish to disclose? 
yesno: users[0].account.there_is_another
---
question: |
  Tell us about your ${ ordinal(i) } account 
fields:
  - 'Account Type': users[0].account[i].name.text
  - 'Account Balance': users[0].account[i].balance
    datatype: currency
    default: |
      0.00
---
code: |
  account_description = comma_and_list([acct.name.text + ", " + str(acct.balance) + "\r" for acct in users[0].account])
---
id: household members
question: |
  Do you live with a household member that is employed?
yesno: users[0].household.there_are_any
---
id: household employment
question: |
  Describe your ${ ordinal(i) } household member's employment
fields:
  - Name of Household Member: users[0].household[i].name.text
  - Occupation: users[0].household[i].occupation
  - Employer Name: users[0].household[i].name.employer
  - Employer Address: users[0].household[i].employer_address
    address autocomplete: True
  - Monthly Income: users[0].household[i].household_income
---
question: |
  Do you have another household member that is employed?
yesno: users[0].household.there_is_another
---
code: |
  household_description = comma_list([hhmember.name.text + ","  + hhmember.occupation + ", " + hhmember.name.employer + ", " + hhmember.employer_address + "," + " " + "$" + str(hhmember.household_income) + "\r" for hhmember in users[0].household])
---
sections:
  - review_affidavit_to_indigency_supplement: Review your answers
---
#################### Interview order #####################
comment: |
  Controls order and branching logic for questions specific to this form
id: interview_order_affidavit_to_indigency_supplement
code: |
  # Set the allowed courts for this interview
  allowed_courts = interview_metadata["affidavit_to_indigency_supplement"]["allowed courts"]
  nav.set_section('review_affidavit_to_indigency_supplement')
  # Below sets the user_role by asking a question.
  trial_court
  case_name
  user_grade_school_completed
  set_progress(14)
  users[0].jobs.gather()
  job_description
  user_training
  user_dependents_number
  user_disabilities
  users[0].expenses.gathered
  set_progress(28)
  user_income_net
  user_owns_home
  user_owns_car
  user_has_debts
  miscellaneous_facts
  users.gather()
  set_parts(subtitle=str(users))
  set_progress(42)
  users[0].address.address
  users[0].birthdate
  set_progress(57)
  set_progress(71)
  signature_date
  interview_order_affidavit_to_indigency_supplement = True
---
###################### Main order ######################
comment: |
  This block includes the logic for standalone interviews.
  Delete mandatory: True to include in another interview
mandatory: True
code: |
  al_intro_screen
  affidavit_to_indigency_supplement_intro
  interview_order_affidavit_to_indigency_supplement
  signature_date
  # Store anonymous data for analytics / statistics
  store_variables_snapshot(
      persistent=True,
      data={
          "zip": showifdef("users[0].address.zip"),
          "reached_interview_end": True,
      },
  )
  affidavit_to_indigency_supplement_preview_question
  basic_questions_signature_flow    
  users[0].signature
  affidavit_to_indigency_supplement_download
---
variable name: expense_list_dict
data: !!omap
  - rent: "Rent or Mortgage"
  - food: "Food"
  - electricity: "Electricity"
  - oil: "Oil"
  - gas: "Gas"
  - water: "Water"
  - telephone: "Telephone"
#  - fuel: "Other Heating/Cooking Fuel"
  - clothing: "Clothing"
  - laundry: "Laundry"
  - transportation: "Transportation"
  - car_insurance: "Car Insurance"
  - child_education: "Child Education"
  - childcare: "Childcare"
  - child_support: "Child Support"
  - health_insurance: "Health Insurance"
  - uninsured: "Medical-Dental (after amount paid by insurance)"
#  - credit cards: "Credit Card Payments"
  - other: "Other"
---
code: |
  for key, val in expense_list_dict.items():
    users[0].expenses[key].display_name = val
    users[0].expenses[key].exists
  users[0].expenses.gathered = True
  users[0].expenses.hook_after_gather()
---
id: how many jobs do you have
question: |
  How many jobs do you have?
fields:
  - no label: users[0].jobs.target_number
    datatype: integer
---
code: |
  job_description = comma_and_list([job.employer_name_address_phone() for job in users[0].jobs])
---
comment: |
  This question is used to introduce your interview. Please customize
id: Supplement_to_the_Affidavit_of_Indigency
continue button field: affidavit_to_indigency_supplement_intro
question: |
  Supplement to the Affidavit of Indigency
subquestion: |
  If you cannot pay for court fees or costs, you may be eligible to have the state cover them. If you checked C on the Affidavit of Indigency, you must fill out this form.
---
id: case info
question: |
  What is your case name and number?
fields:
  - "Case name": case_name
    maxlength: 60
  - "Case number": case_number
    maxlength: 58
---
id: education level
question: |
  What is your highest level of education completed?
fields:
  - "User grade school completed": user_grade_school_completed
    input type: dropdown
    choices:
      - No formal schooling
      - 1st grade
      - 2nd grade
      - 3rd grade
      - 4th grade
      - 5th grade
      - 6th grade
      - 7th grade
      - 8th grade
      - 9th grade
      - 10th grade
      - 11th grade
      - 12th grade
      - Some college
      - Associates degree
      - Bachelor degree
      - Graduate degree
      - Doctorate degree
---
id: itemized job line items
generic object: ALItemizedJob
question: |
    Enter info from your paystub for your job as a ${ x.name }
fields:
    - ${ word("What is your hourly pay for this job?") if x.is_hourly else word("What are your wages for this job?") }: x.to_add['full time'].value
      datatype: currency
      show if:
        code: x.is_part_time is False
    - ${ word("What is your hourly pay for this job?") if x.is_hourly else word("What are your wages for this job?") }: x.to_add['part time'].value
      datatype: currency
      show if:
        code: x.is_part_time is True
    - note: |
        The below amounts are per pay period (${ times_per_year(times_per_year_list=times_per_year_list, times_per_year=x.times_per_year) })
    - How much do you pay in federal taxes?: x.to_subtract['federal_taxes'].value
      datatype: currency
      required: False
    - How much do you pay in state taxes?: x.to_subtract['state_taxes'].value
      datatype: currency
      required: False
    - How much do you pay towards social security?: x.to_subtract['social_security'].value
      datatype: currency
      required: False
    - How much do you pay towards medicare?: x.to_subtract['medicare'].value
      datatype: currency
      required: False
    - Does the job have other incomes?: x.to_add.there_is_another
      datatype: yesnoradio
    - Does the job have other deductions?: x.to_subtract["other_taxes"].exists
      datatype: yesnoradio
    - What are the other deductions for?: x.to_subtract["other_taxes"].display_name
      show if: x.to_subtract["other_taxes"].exists
    - How much are the other deductions?: x.to_subtract["other_taxes"].value
      datatype: currency
      show if: x.to_subtract["other_taxes"].exists
---
---
id: special training
question: |
  Do you have any special job training?
subquestion: |
  For example, you should mention any trade or professional certifications and licenses you have.
fields:
  - no label: user_training
    input type: area
    required: False
    maxlength: 140
---
id: dependents
question: |
  How many dependents do you claim?
subquestion: |
fields:
  - no label: user_dependents_number
    datatype: integer
---
id: disabilities
question: |
  Do you have mental or physical disabilities which affect your income?
subquestion: |
  List them and explain how they affect your earning capacity and living expenses.
fields:
  - no label: user_disabilities
    input type: area
    maxlength: 336
    required: False
---
id: taxes
question: |
  Taxes
fields:
  - "Federal tax deducted": user_tax_federal
    datatype: currency
    min: 0
  - "State tax deducted": user_tax_state
    datatype: currency
    min: 0
  - "Social security tax deducted": user_tax_social_security
    datatype: currency
    min: 0
  - "Medicare tax deducted": user_tax_medicare
    datatype: currency
    min: 0
  - "User tax other amount": user_tax_other_amount
    datatype: currency
    min: 0
  - "Other type of tax withheld": user_tax_other
    maxlength: 21
  - "Other tax withheld": user_tax_total
    datatype: currency
    min: 0
  - "User househould member work name": user_househould_member_work_name
    input type: area
    maxlength: 336
---
code: |
  user_income_after_tax = users[0].jobs.net_total(times_per_year=12)
---
sets:
  - users[0].expenses['rent'].exists
  - users[0].expenses['electricity'].exists
  - users[0].expenses['oil'].exists
  - users[0].expenses['gas'].exists
  - users[0].expenses['water'].exists
  - users[0].expenses['telephone'].exists
id: fixed expenses amount
question: |
  What are your monthly expenses?
fields:
  code: |
    sum((users[0].expenses[source].fields() for source in 
        ["rent", "electricity", "oil", "gas", "water", "telephone"]), [])
---
sets:
  - users[0].expenses['food'].exists
  - users[0].expenses['clothing'].exists
  - users[0].expenses['laundry'].exists
id: variable expenses amount
question: |
  What your are expenses for food, clothing, and laundry?
fields:
  code: |
    sum((users[0].expenses[source].fields() for source in 
        ["food", "clothing", "laundry"]), [])
---
sets:
  - users[0].expenses['transportation'].exists
  - users[0].expenses['care_insurance'].exists
id: transport expenses
question: |
  What are your monthly transportation expenses?
fields:
  code: |
    sum((users[0].expenses[source].fields() for source in
        ["transportation", "car_insurance"]), [])
---
sets:
  - users[0].expenses['child_education'].exists
  - users[0].expenses['childcare'].exists
  - users[0].expenses['child_support'].exists
id: child related expenses
question: |
  What are your monthly child expenses?
fields:
  code: |
    sum((users[0].expenses[source].fields() for source in
        ["child_education", "childcare", "child_support"]), [])
---
id: health expenses amount
question: |
  What are your monthly health expenses?
subquestion: |
  Both health insurance and uninsured medical expneses.
fields:
  code: |
    sum((users[0].expenses[source].fields() for source in
        ["health_insurance", "uninsured"]), [])
---
id: other monthly expenses
question: |
  Do you have any other mothly expenses?
fields:
  - Other monthly expenses: users[0].expenses["other"].exists
    datatype: yesno
  - Describe your remaining expenses: users[0].expenses["other"].display_name
    show if: users[0].expenses["other"].exists
    maxlength: 36
  - Other expenses: users[0].expenses["other"].value
    show if: users[0].expenses["other"].exists
    datatype: currency
    min: 0
---
code: |
  user_income_net = users[0].jobs.net_total(times_per_year=12) - user_expenses_total
---
id: name of one itemized job in list
generic object: ALItemizedJobList
question: |
  What is the your job title for your ${ordinal(i)} job?
subquestion: |
  % if len(users[0].jobs.complete_elements()) > 0:
  You've already told us about being a ${ comma_and_list([job.name for job in users[0].jobs.complete_elements()]) }.
  % endif
fields:
  - Job title: users[0].jobs.name
---
id: home ownership
question: |
  Do you own a home?
fields:
  - no label: user_owns_home
    datatype: yesnoradio
  - "What is the value of the home?": user_home_value
    show if: user_owns_home
    datatype: currency
    min: 0
  - "How much debt do you own on the home?": user_home_debt
    show if: user_owns_home
    datatype: currency
    min: 0
---
id: car ownership
question: |
  Do you own a car?
fields:
  - no label: user_owns_car
    datatype: yesnoradio
  - "Car year": user_car_year
    show if: user_owns_car
    maxlength: 50
  - "Car make": user_car_make
    show if: user_owns_car
    maxlength: 50
  - "Car value": user_car_value
    show if: user_owns_car
    datatype: currency
    min: 0
  - Do you have any car debt?: user_car_loan
    datatype: yesnoradio
    show if: user_owns_car
  - "Car debt": user_car_debt
    show if: user_car_loan
    datatype: currency
    min: 0
---
id: bank accounts
question: |
  What is the balance of your bank accounts?
fields:
  - "Checking account": user_checking_balance
    datatype: currency
    default: |
      0.00
  - "Savings Account": user_savings_balance
    datatype: currency
    default: |
      0.00
---
question: |
  What is the value of your property?
subquestion: |
  List all real estate and physical property that you haven't alread listed, and its value.

  For example, work truck $10,000, business $2,000.
fields:
  - no label: user_property_type
  - value: user_property_value
    datatype: currency
---
id: debts
question: |
  Do you have any unpaid debts?
subquestion: |
  If yes, enter debt type and amount
fields:
  - no label: user_has_debts
    datatype: yesnoradio
  - note: Enter debt type and amount
    show if: user_has_debts
  - 'Specify all debts': user_debts
    input type: area
    maxlength: 336
    show if: user_has_debts
---
id: miscellaneous facts
question: |
  What other facts may be relevant to your ability to pay fees and costs?
fields:
  - no label: miscellaneous_facts
    input type: area
    rows: 4
    maxlength: 420
---
id: preview affidavit_to_indigency_supplement
question: |
  Preview your form before you sign it
subquestion: |
  Here is a preview of the form you will sign on the next page.   
  
  ${ al_court_bundle.as_pdf(key='preview') }

  Click the image to open it in a new tab. Click the "Edit answers" button
  to edit your answers.

  ${ action_button_html(url_action('review_affidavit_to_indigency_supplement'), label='Edit answers', color='info') }
  
  Remember to come back to this window to continue and sign your form.
continue button field: affidavit_to_indigency_supplement_preview_question    
---
code: |
  signature_fields = ['users[0].signature']
---
code: |
  user_expenses_total = users[0].expenses.total()
---
code: |
  # This is a placeholder for the addresses that will be searched
  # for matching address to court. Edit if court venue is based on 
  # a different address than the user's
  addresses_to_search = [user.address for user in users]
---
id: affidavit to indigency supplement review screen
event: review_affidavit_to_indigency_supplement
question: |
  Review your answers
review:
  - Edit: trial_court
    button: |
      **Trial Court:**
      ${ trial_court }
  - Edit: case_name
    button: |
      **Case name**:
      ${ case_name }
  - Edit: case_number
    button: |
      **Case number**:
      ${ case_number }
  - Edit: users.revisit
    button: |
      **Users**

      % for item in users:
        * ${ item }
      % endfor
  - Edit: user_grade_school_completed
    button: |
      **User grade school completed**:
      ${ user_grade_school_completed }
  - Edit: user_training
    button: |
      **Special training**:
      > ${ single_paragraph(user_training) }
  - Edit: user_disabilities
    button: |
      **Disabilities**:
      > ${ single_paragraph(user_disabilities) }
  - Edit: user_dependents_number
    button: |
      **Number of dependents**:
      ${ user_dependents_number }
  - Edit: user_income_nonemployment
    button: |
      **Income, not from employment**:
      > ${ single_paragraph(user_income_nonemployment) }
  - Edit: user_tax_federal
    button: |
      **Federal tax deducted**:
      ${ currency(user_tax_federal) }
  - Edit: user_tax_state
    button: |
      **State tax deducted**:
      ${ currency(user_tax_state) }
  - Edit: user_tax_social_security
    button: |
      **Social security tax deducted**:
      ${ currency(user_tax_social_security) }
  - Edit: user_tax_medicare
    button: |
      **Medicare tax deducted**:
      ${ currency(user_tax_medicare) }
  - Edit: user_tax_other_amount
    button: |
      **User tax other amount**:
      ${ currency(user_tax_other_amount) }
  - Edit: user_tax_other
    button: |
      **Other type of tax withheld**:
      ${ user_tax_other }
  - Edit: user_tax_total
    button: |
      **Other tax withheld**:
      ${ currency(user_tax_total) }
  - Edit: user_househould_member_work_name
    button: |
      **User househould member work name**:
      > ${ single_paragraph(user_househould_member_work_name) }
  - Edit: users[0].expenses["rent"]
    button: |
      **Rent expences**:
      ${ currency(users[0].expenses["rent"]) }
  - Edit: users[0].expenses["uninsured_medical"]
    button: |
      **Uninsured medical expenses**:
      ${ currency(users[0].expenses["uninsured_medical"]) }
  - Edit: users[0].expenses["childcare"]
    button: |
      **Childcare expenses**:
      ${ currency(users[0].expenses["childcare"]) }
  - Edit: users[0].expenses["food"]
    button: |
      **Food expenses**:
      ${ currency(users[0].expenses["food"]) }
  - Edit: users[0].expenses["electricity"]
    button: |
      **Electricity expenses**:
      ${ currency(users[0].expenses["electricity"]) }
  - Edit: users[0].expenses["education"]
    button: |
      **Education expenses**:
      ${ currency(users[0].expenses["education"]) }
  - Edit: users[0].expenses["child_support"]
    button: |
      **Child support expenses**:
      ${ currency(users[0].expenses["child_support"]) }
  - Edit: users[0].expenses["gas"]
    button: |
      **Gas expenses**:
      ${ currency(users[0].expenses["gas"]) }
  - Edit: users[0].expenses["oil"]
    button: |
      **Oil expenses**:
      ${ currency(users[0].expenses["oil"]) }
  - Edit: users[0].expenses["clothing"]
    button: |
      **Clothing expenses**:
      ${ currency(users[0].expenses["clothing"]) }
  - Edit: users[0].expenses["water"]
    button: |
      **Water expenses**:
      ${ currency(users[0].expenses["water"]) }
  - Edit: users[0].expenses["laundry"]
    button: |
      **Laundry expenses**:
      ${ currency(users[0].expenses["laundry"]) }
  - Edit: users[0].expenses["telephone"]
    button: |
      **Telephone expenses**:
      ${ currency(users[0].expenses["telephone"]) }
  - Edit: users[0].expenses["car_insurance"]
    button: |
      **Car insurance expenses**:
      ${ currency(users[0].expenses["car_insurance"]) }
  - Edit: users[0].expenses["health_insurance"]
    button: |
      **Health insurance expenses**:
      ${ currency(users[0].expenses["health_insurance"]) }
  - Edit: users[0].expenses["transportation"]
    button: |
      **Transportation expenses**:
      ${ currency(users[0].expenses["transportation"]) }
  - Edit: users[0].expenses["other"]
    button: |
      **Other expenses type**:
      ${ users[0].expenses["other"] }
  - Edit: user_owns_home
    button: |
      **Owns home**:
      ${ word(yesno(user_owns_home)) }
  - Edit: user_home_value
    button: |
      **Home value**:
      ${ currency(user_home_value) }
  - Edit: user_home_debt
    button: |
      **Home debt**:
      ${ user_home_debt }
  - Edit: user_owns_car
    button: |
      **Owns car**:
      ${ word(yesno(user_owns_car)) }
  - Edit: user_car_year
    button: |
      **Car year**:
      ${ user_car_year }
  - Edit: user_car_make
    button: |
      **Car make**:
      ${ user_car_make }
  - Edit: user_car_value
    button: |
      **Car value**:
      ${ currency(user_car_value) }
  - Edit: user_car_debt
    button: |
      **Car debt**:
      ${ user_car_debt }
  - Edit: user_accounts_balance
    button: |
      **Accounts balance**:
      > ${ single_paragraph(user_accounts_balance) }
  - Edit: user_accounts_type
    button: |
      **Accounts type**:
      > ${ single_paragraph(user_accounts_type) }
  - Edit: user_property_type
    button: |
      **Property type**:
      > ${ single_paragraph(user_property_type) }
  - Edit: user_property_value
    button: |
      **Property value**:
      > ${ single_paragraph(user_property_value) }
  - Edit: user_debts
    button: |
      **Debts**:
      > ${ single_paragraph(user_debts) }
  - Edit: miscellaneous_facts
    button: |
      **Miscellaneous facts**:
      > ${ single_paragraph(miscellaneous_facts) }
  - Edit: signature_date
    button: |
      **Date of signature**:
      ${ signature_date }
---
continue button field: users.revisit
question: |
  Edit users
subquestion: |
  ${ users.table }

  ${ users.add_action() }
---
table: users.table
rows: users
columns:
  - Name: |
      row_item.name.full() if defined("row_item.name.first") else ""
  - Address: |
      row_item.address.block() if defined("row_item.address.zip") else ""
  - Birthdate: |
      row_item.birthdate if defined("row_item.birthdate") else ""
  - Signature: |
      row_item.signature if defined("row_item.signature") else ""
edit:
  - name.first
  - address.zip
  - birthdate
  - signature
confirm: True

---
id: download affidavit_to_indigency_supplement
event: affidavit_to_indigency_supplement_download
question: |
  All done
subquestion: |
  Thank you ${users}. Your form is ready to download and deliver.
  
  View, download and send your form below. Click the "Edit answers" button to fix any mistakes.

  ${ action_button_html(url_action('review_affidavit_to_indigency_supplement'), label='Edit answers', color='info') }
  
  
  ${ al_user_bundle.download_list_html() }
  

  ${ al_user_bundle.send_button_html(show_editable_checkbox=False) }

progress: 100
---
objects:
  - affidavit_to_indigency_supplement_post_interview_instructions: ALDocument.using(title="Instructions", filename="affidavit_to_indigency_supplement_next_steps.docx", enabled=True, has_addendum=False, default_overflow_message=AL_DEFAULT_OVERFLOW_MESSAGE)
  - affidavit_to_indigency_supplement_attachment: ALDocument.using(title="Supplement to the Affidavit of Indigency", filename="affidavit_to_indigency_supplement.pdf", enabled=True, has_addendum=False, default_overflow_message=AL_DEFAULT_OVERFLOW_MESSAGE)
---
objects:
  - al_user_bundle: ALDocumentBundle.using(elements=[affidavit_to_indigency_supplement_post_interview_instructions,affidavit_to_indigency_supplement_attachment], filename="affidavit_to_indigency_supplement.pdf_package.pdf", title="All forms to download for your records", enabled=True)
  - al_court_bundle: ALDocumentBundle.using(elements=[affidavit_to_indigency_supplement_attachment], filename="affidavit_to_indigency_supplement.pdf_package.pdf", title="All forms to download for your records", enabled=True)
---
attachments:
  - name: affidavit to indigency supplement post interview instructions
    filename: Post-interview-instructions     
    variable name: affidavit_to_indigency_supplement_post_interview_instructions[i]        
    skip undefined: True
    docx template file: affidavit_to_indigency_supplement_next_steps.docx
  - name: affidavit to indigency supplement attachment
    filename: affidavit_to_indigency_supplement.pdf     
    variable name: affidavit_to_indigency_supplement_attachment[i]        
    skip undefined: True
    pdf template file: affidavit_to_indigency_supplement.pdf
    fields:
      - "court_name": ${ trial_court }
      - "case_name": ${ case_name }
      - "case_number": ${ case_number }
      - "users1_name": ${ users[0] }
      - "users1_name__2": ${ users[0] }
      - "users1_address_on_one_line": ${ users[0].address.on_one_line() }
      - "users1_birthdate": ${ users[0].birthdate.format() }
      - "user_grade_school_completed": ${ user_grade_school_completed }
      - "user_training": ${ user_training }
      - "user_disabilities": ${ user_disabilities }
      - "user_dependents_number": ${ user_dependents_number }
      - "user_work_name": ${ job_description }
      - "user_income_nonemployment": ${ user_income_nonemployment }
      - "user_income_gross_annual": ${ currency(users[0].jobs.gross_total(times_per_year=1)) }
      - "user_income_gross_monthly": ${ currency(users[0].jobs.gross_total(times_per_year=12)) }
      - "user_tax_federal": ${ currency(users[0].jobs.deduction_total(source='federal_tax', times_per_year=12)) }
      - "user_tax_state": ${ currency(users[0].jobs.deduction_total(source='state_tax', times_per_year=12)) }
      - "user_tax_social_security": ${ currency(users[0].jobs.deduction_total(source='social_security', times_per_year=12)) }
      - "user_tax_medicare": ${ currency(users[0].jobs.deduction_total(source='medicare', times_per_year=12)) }
      - "user_tax_other_amount": ${ currency(users[0].jobs.deduction_total(source='other', times_per_year=12)) }
      - "user_tax_other": ${ user_tax_other }
      - "user_tax_total": ${ currency(user[0].jobs.deduction_total(sources=['federal_tax', 'state_tax', 'social_security', 'medicare', 'other_tax'], times_per_year=12)) }
      - "user_income_after_tax1": ${ currency(users[0].jobs.net_total(times_per_year=12)) }
      - "user_househould_member_work_name": ${ user_househould_member_work_name }
      - "user_income_after_tax2": ${ currency(users[0].jobs.net_total(times_per_year=12)) }
      - "user_expense_rent": ${ currency(users[0].expenses["rent"]) }
      - "user_expense_uninsured_medical": ${ currency(user[0].expense_uninsured_medical) }
      - "user_expense_childcare": ${ currency(user[0].expenses["childcare"]) }
      - "user_expense_food": ${ currency(user[0].expenses["food"]) }
      - "user_expense_electricity": ${ currency(user[0].expenses["electricity"]) }
      - "user_expense_education": ${ currency(users[0].expenses["child education"]) }
      - "user_expense_child_support": ${ currency(users[0].expense["child_support"]) }
      - "user_expense_gas": ${ currency(users[0].expense["gas"]) }
      - "user_expense_oil": ${ currency(users[0].expenses["oil"]) }
      - "user_expense_clothing": ${ currency(users[0].expenses["clothing"]) }
      - "user_expense_water": ${ currency(users[0].expenses["water"]) }
      - "user_expense_laundry": ${ currency(users[0].expenses["laundry"]) }
      - "user_expense_telephone": ${ currency(users[0].expenses["telephone"]) }
      - "user_expense_car_insurance": ${ currency(users[0].expenses["car_insurance"]) }
      - "user_expense_health_insurance": ${ currency(users[0].expenses["health_insurance"]) }
      - "user_expense_transportation": ${ currency(users[0].expenses["transportation"]) }
      - "user_expense_other_amount": ${ currency(users[0].expenses["other"]) }
      - "user_expense_other": ${ users[0].expenses["other"] }
      - "user_expense_total": ${ user_expenses_total }
      - "user_income_net": ${ currency(user_income_net) }
      - "user_owns_home_yes": ${ user_owns_home }
      - "user_owns_home_no": ${ not user_owns_home }
      - "user_home_value": ${ currency(user_home_value) }
      - "user_home_debt": ${ user_home_debt }
      - "user_owns_car_yes": ${ user_owns_car }
      - "user_owns_car_no": ${ not user_owns_car }
      - "user_car_year": ${ user_car_year }
      - "user_car_make": ${ user_car_make }
      - "user_car_value": ${ currency(user_car_value) }
      - "user_car_debt": ${ user_car_debt }
      - "user_accounts_balance": ${ user_accounts_balance }
      - "user_accounts_type": ${ user_accounts_type }
      - "user_property_type": ${ user_property_type }
      - "user_property_value": ${ user_property_value }
      - "user_debts": ${ user_debts }
      - "miscellaneous_facts": ${ miscellaneous_facts }
      - "users1_signature": ${ users[0].signature_if_final(i) }
      - "users1_address_line_one": ${ users[0].address.line_one() }
      - "users1_address_city": ${ users[0].address.city }
      - "users1_address_state": ${ users[0].address.state }
      - "users1_address_zip": ${ users[0].address.zip }
      - "signature_date": ${ signature_date }
