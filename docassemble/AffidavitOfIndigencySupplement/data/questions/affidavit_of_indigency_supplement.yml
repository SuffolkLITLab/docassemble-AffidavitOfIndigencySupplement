---
include:
  - docassemble.AssemblyLine:assembly_line.yml
  - docassemble.ALMassachusetts:al_massachusetts.yml
  - docassemble.MassAccess:massaccess.yml
  - docassemble.ALToolbox:al_income.yml
---
imports:
  - decimal
---
metadata:
  title: |
    Supplement to the Affidavit of Indigency
  short title: |
    Affidavit of Indigency Supplement
  tags:
    - BE-04-00-00-00
    - MO-00-00-00-00
  authors:
    - Bryce Willey
    - Samuel Roth
---
mandatory: True
comment: |
  Global interview metadata
variable name: interview_metadata["affidavit_of_indigency_supplement"]
data:
  al_weaver_version: "playground"
  generated on: "2022-08-23"
  title: >-
    Supplement to the Affidavit of Indigency
  short title: >-
    Affidavit of Indigency Supplement
  description: |-
    A supplement to the Affidavit of Indigency, giving the court detailed information about finances
  original_form: >-
    https://www.mass.gov/doc/supplement-to-the-affidavit-of-indigency/download
  allowed courts:
    - "Boston Municipal Court"
    - "District Court"
    - "Housing Court"
    - "Juvenile Court"
    - "Land Court"
    - "Probate and Family Court"
    - "Superior Court"
  categories:
    - "MO-00-00-00-00"
    - "BE-04-00-00-00"
  typical role: "unknown"
  generate download screen: True
---
code: |
  interview_metadata['main_interview_key'] =  'affidavit_of_indigency_supplement'
---
code: |
  # This controls the default country and list of states in address field questions
  AL_DEFAULT_COUNTRY = "US"
---
code: |
  # This controls the default state in address field questions
  AL_DEFAULT_STATE = "MA"
---
code: |
  github_repo_name =  'docassemble-AffidavitToIndigencySupplement'
---
code: |
  interview_short_title = "File a Supplement to the Affidavit of Indigency"
---
code: |
  al_form_type = "existing_case" 
---
objects:
  - users: ALPeopleList.using(ask_number=True,target_number=1)
  - household: ALPeopleList
---
objects:
  - users[i].jobs: ALItemizedJobList.using(
      complete_attribute='complete',
      object_type=ALItemizedJob.using(employer_type=ALIndividual),
      ask_number=True)
  - users[i].nonemployment: ALIncomeList
  - users[i].expenses: ALItemizedValueDict.using(auto_gather=False, complete_attribute="exists")
  - users[i].accounts: ALAssetList.using(complete_attribute='balance')
---
objects:
  - household[i].employer: ALIndividual
---
id: loop start bank accounts
question: |
 Do you have any bank accounts that you wish to disclose?
subquestion: |
  For example: money market accounts, investment accounts etc.
fields:
  - no label: users[0].accounts.there_are_any
    datatype: yesnoradio
---
id: another account
question: |
  Are there any other accounts that you wish to disclose? 
fields:
  - no label: users[0].accounts.there_is_another
    datatype: yesnoradio
---
question: |
  Tell us about your ${ ordinal(i) } account
fields:
  - 'Account Type': users[0].accounts[i].source
  - 'Account Balance': users[0].accounts[i].balance
    datatype: currency
    default: |
      0.00
---
code: |
  def list_accounts(accts):
      return comma_and_list([acct.source for acct in accts], comma_string=',\n', and_string=',\n')
---
id: household members
question: |
  Do you live with a household member that is employed?
fields:
  - no label: household.there_are_any
    datatype: yesnoradio
---
sets:
  - household[i].name.first
  - household[i].name.last
  - household[i].occupation
  - household[i].employer_address
  - household[i].employer_name
  - household[i].household_income
question: |
  Describe your ${ ordinal(i) } household member's employment
fields:
  - code: household[i].name_fields()
  - Occupation: household[i].occupation
  - Monthly Income: household[i].household_income
    datatype: currency
  - note: |
      **Employer's information**
  - code: household[i].employer.name_fields(person_or_business='unsure')
  - code: household[i].employer.address.address_fields()
---
question: |
  Do you have another household member that is employed?
fields:
  - no label: household.there_is_another
    datatype: yesnoradio
---
code: |
  def list_household(all_hh):
      return comma_list([f"{hh.name}, works as a {hh.occupation} for {hh.employer.name} ({hh.employer.address}) making ${hh.household_income}\n" for hh in all_hh])
---
sections:
  - review_affidavit_of_indigency_supplement: Review your answers
---
#################### Interview order #####################
comment: |
  Controls order and branching logic for questions specific to this form
id: interview_order_affidavit_of_indigency_supplement
code: |
  # Set the allowed courts for this interview
  allowed_courts = interview_metadata["affidavit_of_indigency_supplement"]["allowed courts"]
  nav.set_section('review_affidavit_of_indigency_supplement')
  # Below sets the user_role by asking a question.
  trial_court
  case_name
  user_grade_school_completed
  set_progress(14)
  users[0].jobs.gather()
  users[0].nonemployment.gather()
  list_incomes
  job_description
  user_training
  user_dependents_number
  user_disabilities
  household.gather()
  list_household
  users[0].expenses.gathered
  set_progress(28)
  user_income_net
  user_owns_home
  user_owns_car
  users[0].accounts.gather()
  user_has_debts
  user_owns_property
  miscellaneous_facts
  users.gather()
  set_parts(subtitle=str(users))
  set_progress(42)
  users[0].address.address
  users[0].birthdate
  set_progress(57)
  set_progress(71)
  signature_date
  interview_order_affidavit_of_indigency_supplement = True
---
###################### Main order ######################
comment: |
  This block includes the logic for standalone interviews.
  Delete mandatory: True to include in another interview
mandatory: True
code: |
  al_intro_screen
  affidavit_of_indigency_supplement_intro
  interview_order_affidavit_of_indigency_supplement
  signature_date
  # Store anonymous data for analytics / statistics
  store_variables_snapshot(
      persistent=True,
      data={
          "zip": showifdef("users[0].address.zip"),
          "reached_interview_end": True,
      },
  )
  affidavit_of_indigency_supplement_preview_question
  basic_questions_signature_flow    
  users[0].signature
  affidavit_of_indigency_supplement_download
---
variable name: expense_list_dict
data: !!omap
  - rent: "Rent or Mortgage"
  - food: "Food"
  - electricity: "Electricity"
  - oil: "Oil"
  - gas: "Gas"
  - water: "Water"
  - telephone: "Telephone"
  - fuel: "Other Heating/Cooking Fuel"
  - clothing: "Clothing"
  - laundry: "Laundry"
  - transportation: "Transportation"
  - car_insurance: "Car Insurance"
  - child_education: "Child Education"
  - childcare: "Childcare"
  - child_support: "Child Support"
  - health_insurance: "Health Insurance"
  - uninsured_medical: "Medical-Dental (after amount paid by insurance)"
  - other: "Other monthly expenses"
#  - credit cards: "Credit Card Payments"
---
code: |
  for key, val in expense_list_dict.items():
    users[0].expenses[key].display_name = val
  for key, val in expense_list_dict.items():
    users[0].expenses[key].exists
  users[0].expenses.gathered = True
  users[0].expenses.revisit = True
  users[0].expenses.hook_after_gather()
---
id: how many jobs do you have
question: |
  How many jobs do you have?
fields:
  - no label: users[0].jobs.target_number
    datatype: integer
---
id: any non-employment incomes
question: |
  Do you have any sources of income, not from employment?
fields:
  - no label: users[0].nonemployment.there_are_any
    datatype: yesnoradio
---
question: |
  Tell us about your ${ ordinal(i) } income
subquestion: |
  You have already told us about your incomes from ${ list_incomes(users[0].nonemployment) }.
fields:
  - Source of income: users[0].nonemployment[i].source
  - Times per year you recieve this income: users[0].nonemployment[i].times_per_year
    input type: radio
    code: |
      times_per_year_list
  - Amount of income: users[0].nonemployment[i].value
    datatype: currency
---
code: |
  def list_incomes(incomes):
      return comma_and_list([f"{income.source} ({currency(income.value)} {times_per_year(times_per_year_list, income.times_per_year)})" for income in incomes.complete_elements()])
---
id: any more non-employment incomes
question: |
  Do you have any additional sources of income not from employment?
subquestion: |
  You have already told us about your incomes from ${ list_incomes(users[0].nonemployment) }.
fields:
  - no label: users[0].nonemployment.there_is_another
    datatype: yesnoradio
---
code: |
  job_description = comma_and_list([job.employer_name_address_phone() for job in users[0].jobs])
---
comment: |
  This question is used to introduce your interview. Please customize
id: Supplement_to_the_Affidavit_of_Indigency
continue button field: affidavit_of_indigency_supplement_intro
question: |
  Supplement to the Affidavit of Indigency
subquestion: |
  If you cannot pay for court fees or costs, you may be eligible to have the state cover them. If you checked C on the Affidavit of Indigency, you must fill out this form.
---
id: case info
question: |
  What is your case name and number?
fields:
  - "Case name": case_name
    maxlength: 60
  - "Case number": case_number
    maxlength: 58
---
id: education level
question: |
  What is your highest level of education completed?
fields:
  - "User grade school completed": user_grade_school_completed
    input type: dropdown
    choices:
      - No formal schooling
      - 1st grade
      - 2nd grade
      - 3rd grade
      - 4th grade
      - 5th grade
      - 6th grade
      - 7th grade
      - 8th grade
      - 9th grade
      - 10th grade
      - 11th grade
      - 12th grade
      - Some college
      - Associates degree
      - Bachelor degree
      - Graduate degree
      - Doctorate degree
---
id: itemized job line items
generic object: ALItemizedJob
question: |
    ${ x.source } Pay
subquestion: |
    Enter info from your paystub for your job as a ${ x.source }

    ---
fields:
    - ${ word("What is the hourly pay for this job?") if x.is_hourly else word("What are your wages for this job?") }: x.to_add['full time'].value
      datatype: currency
      show if:
        code: x.is_part_time is False
    - ${ word("What is the hourly pay for this job?") if x.is_hourly else word("What are your wages for this job?") }: x.to_add['part time'].value
      datatype: currency
      show if:
        code: x.is_part_time is True
    - note: |
        The below amounts are per pay period (${ times_per_year(times_per_year_list=times_per_year_list, times_per_year=x.times_per_year) })
    - How much do you pay in federal taxes?: x.to_subtract['federal_taxes'].value
      datatype: currency
      required: False
    - How much do you pay in state taxes?: x.to_subtract['state_taxes'].value
      datatype: currency
      required: False
    - How much do you pay towards social security?: x.to_subtract['social_security'].value
      datatype: currency
      required: False
    - How much do you pay towards medicare?: x.to_subtract['medicare'].value
      datatype: currency
      required: False
    - Does the job have other incomes?: x.to_add.there_is_another
      datatype: yesnoradio
    - Does the job have other deductions?: x.to_subtract.there_is_another
      datatype: yesnoradio
---
generic object: ALItemizedJob
code: |
  x.to_subtract[i].exists = True
---
code: |
  taxes_on_form = set(['medicare', 'social_security', 'state_taxes', 'federal_taxes'])
---
code: |
  expenses_on_form = set(['rent', 'food', 'electricity', 'gas', 'oil', 'water', 'telephone', 
      'health_insurance', 'uninsured_medical', 'childcare', 'child_education', 'child_support',
      'clothing', 'laundry', 'car_insurance', 'transportation'])
---
generic object: ALItemizedJob
code: |
  x.to_subtract[i].exists
  if x.to_subtract[i].exists:
    x.to_subtract[i].value
  x.to_subtract[i].complete = True
---
id: special training
question: |
  Do you have any special job training?
subquestion: |
  For example, you should mention any trade or professional certifications and licenses you have.
fields:
  - no label: user_training
    input type: area
    required: False
    maxlength: 140
---
id: dependents
question: |
  How many dependents do you claim?
subquestion: |
fields:
  - no label: user_dependents_number
    datatype: integer
---
id: disabilities
question: |
  Do you have mental or physical disabilities which affect your income?
subquestion: |
  List them and explain how they affect your earning capacity and living expenses.
fields:
  - no label: user_disabilities
    input type: area
    maxlength: 336
    required: False
---
sets:
  - users[0].expenses['rent'].exists
  - users[0].expenses['electricity'].exists
  - users[0].expenses['oil'].exists
  - users[0].expenses['gas'].exists
  - users[0].expenses['fuel'].exists
  - users[0].expenses['water'].exists
  - users[0].expenses['telephone'].exists
id: fixed expenses amount
question: |
  What are your monthly expenses?
fields:
  code: |
    sum((users[0].expenses[source].fields() for source in 
        ["rent", "electricity", "oil", "gas", "fuel", "water", "telephone"]), [])
---
sets:
  - users[0].expenses['food'].exists
  - users[0].expenses['clothing'].exists
  - users[0].expenses['laundry'].exists
id: variable expenses amount
question: |
  What your are expenses for food, clothing, and laundry?
fields:
  code: |
    sum((users[0].expenses[source].fields() for source in 
        ["food", "clothing", "laundry"]), [])
---
sets:
  - users[0].expenses['transportation'].exists
  - users[0].expenses['car_insurance'].exists
id: transport expenses
question: |
  What are your monthly transportation expenses?
fields:
  code: |
    sum((users[0].expenses[source].fields() for source in
        ["transportation", "car_insurance"]), [])
---
sets:
  - users[0].expenses['child_education'].exists
  - users[0].expenses['childcare'].exists
  - users[0].expenses['child_support'].exists
id: child related expenses
question: |
  What are your monthly child expenses?
fields:
  code: |
    sum((users[0].expenses[source].fields() for source in
        ["child_education", "childcare", "child_support"]), [])
---
sets:
  - users[0].expenses['health_insurance'].exists
  - users[0].expenses['uninsured_medical'].exists
id: health expenses amount
question: |
  What are your monthly health expenses?
subquestion: |
  Both health insurance and uninsured medical expneses.
fields:
  code: |
    sum((users[0].expenses[source].fields() for source in
        ["health_insurance", "uninsured_medical"]), [])
---
id: other monthly expenses
question: |
  Do you have any other mothly expenses?
fields:
  - Other monthly expenses: users[0].expenses["other"].exists
    datatype: yesno
  - Describe your remaining expenses: users[0].expenses["other"].display_name
    show if: users[0].expenses["other"].exists
    maxlength: 36
  - Other expenses: users[0].expenses["other"].value
    show if: users[0].expenses["other"].exists
    datatype: currency
    min: 0
---
code: |
  user_income_net = users[0].jobs.net_total(times_per_year=12) + users[0].nonemployment.total(times_per_year=12) - users[0].expenses.total()
---
id: name of one itemized job in list
generic object: ALItemizedJobList
question: |
  What is the the job title of your ${ 'primary' if i == 0 else ordinal(i)} job?
subquestion: |
  % if len(users[0].jobs.complete_elements()) > 0:
  You've already told us about being a ${ comma_and_list([job.source for job in users[0].jobs.complete_elements()]) }.
  % endif
fields:
  - Job title: users[0].jobs[i].source
---
id: home ownership
question: |
  Do you own a home?
fields:
  - no label: user_owns_home
    datatype: yesnoradio
  - "What is the value of the home?": user_home_value
    show if: user_owns_home
    datatype: currency
    min: 0
  - "How much debt do you own on the home?": user_home_debt
    show if: user_owns_home
    datatype: currency
    min: 0
---
id: car ownership
question: |
  Do you own a car?
fields:
  - no label: user_owns_car
    datatype: yesnoradio
  - "Car year": user_car_year
    show if: user_owns_car
    maxlength: 50
  - "Car make": user_car_make
    show if: user_owns_car
    maxlength: 50
  - "Car value": user_car_value
    show if: user_owns_car
    datatype: currency
    min: 0
  - Do you have any car debt?: user_car_loan
    datatype: yesnoradio
    show if: user_owns_car
  - "Car debt": user_car_debt
    show if: user_car_loan
    datatype: currency
    min: 0
---
question: |
  Do you own any property?
subquestion: |
  This includes real estate and physical property that you haven't already told us about.
  For example, a piece of land, or a work truck.

  % if user_owns_car or user_owns_home:
  You have already said that you own ${ comma_and_list(filter(lambda y: bool(y), [
      f"a house worth {currency(user_home_value)}" if user_owns_home else "",
      f"a car worth {currency(user_car_value)}" if user_owns_car else ""
  ])) }.
  % endif
fields:
  - no label: user_owns_property
    input type: radio
    choices:
      - Yes, I own additional property: True
      - No, I don't own any additional property: False
  - List the property that you own: user_property_type
    input type: area
    show if: user_owns_property
  - Combined value of the property: user_property_value
    datatype: currency
    show if: user_owns_property
---
id: debts
question: |
  Do you have any unpaid debts?
fields:
  - no label: user_has_debts
    input type: radio
    choices:
      - Yes, I have unpaid debts: True
      - No, I don't have unpaid debts: False
  - note: Enter debt type and amount
    show if: user_has_debts
  - 'Specify all debts': user_debts
    input type: area
    maxlength: 336
    show if: user_has_debts
---
id: miscellaneous facts
question: |
  What other facts may be relevant to your ability to pay fees and costs?
fields:
  - no label: miscellaneous_facts
    input type: area
    required: False
    rows: 4
    maxlength: 420
---
id: preview affidavit_of_indigency_supplement
question: |
  Preview your form before you sign it
subquestion: |
  Here is a preview of the form you will sign on the next page.   
  
  ${ al_court_bundle.as_pdf(key='preview') }

  Click the image to open it in a new tab. Click the "Edit answers" button
  to edit your answers.

  ${ action_button_html(url_action('review_affidavit_of_indigency_supplement'), label='Edit answers', color='info') }
  
  Remember to come back to this window to continue and sign your form.
continue button field: affidavit_of_indigency_supplement_preview_question
---
code: |
  signature_fields = ['users[0].signature']
---
code: |
  # This is a placeholder for the addresses that will be searched
  # for matching address to court. Edit if court venue is based on 
  # a different address than the user's
  addresses_to_search = [user.address for user in users]
---
sets:
  - x.employer.name.first
id: employer
generic object: ALItemizedJob
question: |
  Tell us who employs you as a ${ x.source }
fields:
  - code: x.employer.name_fields(person_or_business='unsure') 
  - code: x.employer.address.address_fields()
  - Phone number: x.employer.phone_number
    required: False
---
id: affidavit to indigency supplement review screen
event: review_affidavit_of_indigency_supplement
question: |
  Review your answers
review:
  - Edit: trial_court
    button: |
      **Trial Court:**
      ${ trial_court }
  - Edit: case_name
    button: |
      **Case name**:
      ${ case_name }
  - Edit: case_number
    button: |
      **Case number**:
      ${ case_number }
  - Edit: users.revisit
    button: |
      **Users**

      % for item in users:
        * ${ item }
      % endfor
  - Edit: user_grade_school_completed
    button: |
      **User grade school completed**:
      ${ user_grade_school_completed }
  - Edit: user_training
    button: |
      **Special training**:
      > ${ single_paragraph(user_training) }
  - Edit: user_disabilities
    button: |
      **Disabilities**:
      > ${ single_paragraph(user_disabilities) }
  - Edit: user_dependents_number
    button: |
      **Number of dependents**:
      ${ user_dependents_number }
  - Edit: user[0].nonemployment.revisit
    button: |
      **Income, not from employment**:

      ${ list_incomes(users[0].nonemployment) }
  - Edit: users[0].jobs.revisit
    button: |
      **Monthly income from jobs**
      ${ currency(users[0].jobs.net_total(times_per_year=12)) }
  - Edit: household.revisit
    button: |
      **Household member employment**:

      ${ household }
  - Edit: users[0].expenses.revisit
    button: |
      **Expenses**:

      % for key in users[0].expenses.keys():
      % if users[0].expenses[key].exists:
        * ${ expense_list_dict.get(key, key) }: ${ currency(users[0].expenses[key].value) }
      % endif
      % endfor
  - Edit: user_owns_home
    button: |
      **${ word("Owns home") if user_owns_home else word("Does not own home") }**

      % if user_owns_home:
      **Home value**:
      ${ currency(user_home_value) }

      **Home debt**:
      ${ currency(user_home_debt) }
      % endif
  - Edit: user_owns_car
    button: |
      **${ word("Owns car") if user_owns_car else word("Does not own car") }**

      % if user_owns_car:
      **Car year**:
      ${ user_car_year }

      **Car make**:
      ${ user_car_make }

      **Car value**:
      ${ currency(user_car_value) }

      **Car debt**:
      ${ currency(user_car_debt) }
      % endif
  - Edit: users[0].accounts.revisit
    button: |
      **Accounts**:

      % for acct in users[0].accounts:
      * ${ acct }
      % endfor
  - Edit: user_owns_property
    button: |
      % if user_owns_property:
      **Additional Property**:
      
      % for prop_type, prop_val in zip(user_property_type.split('\n'), user_property_value.split('\n')):
      * ${ user_property_type }: ${ currency(user_property_value) }
      % endfor
      % else:
      **Owns no additional property.**
      % endif
  - Edit: user_debts
    button: |
      **Debts**:
      > ${ single_paragraph(user_debts) }
  - Edit: miscellaneous_facts
    button: |
      **Miscellaneous facts**:
      > ${ single_paragraph(miscellaneous_facts) }
  - Edit: signature_date
    button: |
      **Date of signature**:
      ${ signature_date }
---
continue button field: users.revisit
question: |
  Edit users
subquestion: |
  ${ users.table }

  ${ users.add_action() }
---
table: users.table
rows: users
columns:
  - Name: |
      row_item.name.full() if defined("row_item.name.first") else ""
  - Address: |
      row_item.address.block() if defined("row_item.address.zip") else ""
  - Birthdate: |
      row_item.birthdate if defined("row_item.birthdate") else ""
  - Signature: |
      row_item.signature if defined("row_item.signature") else ""
edit:
  - name.first
  - address.zip
  - birthdate
  - signature
confirm: True
---
table: users[0].jobs[i].to_subtract.table
rows: x
columns:
  - Type: |
      row_index
  - Amount: |
      '$0' if hasattr(row_item, 'exists') and not row_item.exists else currency(row_item.value)
edit:
  - exists
  - value
---
table: users[0].jobs[i].to_add.table
rows: x
columns:
  - Type: |
      row_index
  - Amount: |
      '$0' if hasattr(row_item, 'exists') and not row_item.exists else currency(row_item.value)
edit:
  - exists
  - value
---
continue button field: household.revisit
question: |
  Edit household members
subquestion: |
  ${ household.table }

  ${ household.add_action() }
---
table: household.table
rows: household
columns:
  - Name: |
      row_item.name.full() if defined("row_item.name.first") else ""
  - Occupation: |
      row_item.occupation
  - Income: |
      row_item.household_income
  - Employer: |
      row_item.employer.name.full()
edit:
  - name.first
  - occupation
  - household_income
  - employer.name.first
---
continue button field: users[0].expenses.revisit
question: |
  Edit expenses
subquestion: |
  ${ users[0].expenses.table }

  ${ users[0].expenses.add_action() }
---
continue button field: users[0].accounts.revisit
question: |
  Edit accounts
subquestion: |
  ${ users[0].accounts.table }

  ${ users[0].accounts.add_action() }
---
table: users[0].accounts.table
rows: users[0].accounts
columns:
  - Name: |
      row_item.name
  - Amount: |
      row_item.balance
edit:
  - name
  - balance
---
id: download affidavit_of_indigency_supplement
event: affidavit_of_indigency_supplement_download
question: |
  All done
subquestion: |
  Thank you ${users}. Your form is ready to download and deliver.
  
  View, download and send your form below. Click the "Edit answers" button to fix any mistakes.

  ${ action_button_html(url_action('review_affidavit_of_indigency_supplement'), label='Edit answers', color='info') }
  
  
  ${ al_user_bundle.download_list_html() }
  

  ${ al_user_bundle.send_button_html(show_editable_checkbox=False) }

progress: 100
---
objects:
  - affidavit_of_indigency_supplement_post_interview_instructions: ALDocument.using(title="Instructions", filename="affidavit_of_indigency_supplement_next_steps.docx", enabled=True, has_addendum=False, default_overflow_message=AL_DEFAULT_OVERFLOW_MESSAGE)
  - affidavit_of_indigency_supplement_attachment: ALDocument.using(title="Supplement to the Affidavit of Indigency", filename="affidavit_of_indigency_supplement.pdf", enabled=True, has_addendum=False, default_overflow_message=AL_DEFAULT_OVERFLOW_MESSAGE)
---
objects:
  - al_user_bundle: ALDocumentBundle.using(elements=[affidavit_of_indigency_supplement_post_interview_instructions,affidavit_of_indigency_supplement_attachment], filename="affidavit_of_indigency_supplement.pdf_package.pdf", title="All forms to download for your records", enabled=True)
  - al_court_bundle: ALDocumentBundle.using(elements=[affidavit_of_indigency_supplement_attachment], filename="affidavit_of_indigency_supplement.pdf_package.pdf", title="All forms to download for your records", enabled=True)
---
attachments:
  - name: affidavit to indigency supplement post interview instructions
    filename: Post-interview-instructions
    variable name: affidavit_of_indigency_supplement_post_interview_instructions[i]
    skip undefined: True
    docx template file: affidavit_of_indigency_supplement_next_steps.docx
  - name: affidavit to indigency supplement attachment
    filename: affidavit_of_indigency_supplement.pdf
    variable name: affidavit_of_indigency_supplement_attachment[i]
    skip undefined: True
    pdf template file: affidavit_of_indigency_supplement.pdf
    fields:
      - "court_name": ${ trial_court }
      - "case_name": ${ case_name }
      - "case_number": ${ case_number }
      - "users1_name": ${ users[0] }
      - "users1_name__2": ${ users[0] }
      - "users1_address_on_one_line": ${ users[0].address.on_one_line() }
      - "users1_birthdate": ${ users[0].birthdate.format() }
      - "user_grade_school_completed": ${ user_grade_school_completed }
      - "user_training": ${ user_training }
      - "user_disabilities": ${ user_disabilities }
      - "user_dependents_number": ${ user_dependents_number }
      - "user_work_name": ${ job_description }
      - "user_income_nonemployment": ${ list_incomes(users[0].nonemployment) }
      - "user_income_gross_annual": ${ thousands(users[0].jobs.gross_total(times_per_year=1) + users[0].nonemployment.total(times_per_year=1), show_decimals=True) }
      - "user_income_gross_monthly": ${ thousands(users[0].jobs.gross_total(times_per_year=12) + users[0].nonemployment.total(times_per_year=12), show_decimals=True) }
      - "user_tax_federal": ${ thousands(users[0].jobs.deduction_total(source='federal_taxes', times_per_year=12), show_decimals=True) }
      - "user_tax_state": ${ thousands(users[0].jobs.deduction_total(source='state_taxes', times_per_year=12), show_decimals=True) }
      - "user_tax_social_security": ${ thousands(users[0].jobs.deduction_total(source='social_security', times_per_year=12), show_decimals=True) }
      - "user_tax_medicare": ${ thousands(users[0].jobs.deduction_total(source='medicare', times_per_year=12), show_decimals=True) }
      - "user_tax_other_amount": ${ thousands(users[0].jobs.deduction_total(exclude_source=["federal_taxes", "state_taxes", "social_security", "medicare"], times_per_year=12), show_decimals=True) }
      - "user_tax_other": ${ comma_and_list([name for name in users[0].jobs.sources(which_side='deductions') if name not in taxes_on_form]) }
      - "user_tax_total": ${ thousands(users[0].jobs.deduction_total(times_per_year=12), show_decimals=True) }
      - "user_income_after_tax1": ${ thousands(users[0].jobs.net_total(times_per_year=12) + users[0].nonemployment.total(times_per_year=12), show_decimals=True) }
      - "user_househould_member_work_name": ${ list_household(household) }
      - "user_income_after_tax2": ${ thousands(users[0].jobs.net_total(times_per_year=12) + users[0].nonemployment.total(times_per_year=12), show_decimals=True) }
      - "user_expense_rent": ${ thousands(users[0].expenses["rent"], show_decimals=True) }
      - "user_expense_uninsured_medical": ${ thousands(users[0].expenses["uninsured_medical"], show_decimals=True) }
      - "user_expense_childcare": ${ thousands(users[0].expenses["childcare"], show_decimals=True) }
      - "user_expense_food": ${ thousands(users[0].expenses["food"], show_decimals=True) }
      - "user_expense_electricity": ${ thousands(users[0].expenses["electricity"], show_decimals=True) }
      - "user_expense_education": ${ thousands(users[0].expenses["child_education"], show_decimals=True) }
      - "user_expense_child_support": ${ thousands(users[0].expenses["child_support"], show_decimals=True) }
      - "user_expense_gas": ${ thousands(users[0].expenses["gas"], show_decimals=True) }
      - "user_expense_oil": ${ thousands(users[0].expenses["oil"], show_decimals=True) }
      - "user_expense_clothing": ${ thousands(users[0].expenses["clothing"], show_decimals=True) }
      - "user_expense_water": ${ thousands(users[0].expenses["water"], show_decimals=True) }
      - "user_expense_laundry": ${ thousands(users[0].expenses["laundry"], show_decimals=True) }
      - "user_expense_telephone": ${ thousands(users[0].expenses["telephone"], show_decimals=True) }
      - "user_expense_car_insurance": ${ thousands(users[0].expenses["car_insurance"], show_decimals=True) }
      - "user_expense_health_insurance": ${ thousands(users[0].expenses["health_insurance"], show_decimals=True) }
      - "user_expense_transportation": ${ thousands(users[0].expenses["transportation"], show_decimals=True) }
      - "user_expense_other_amount": ${ thousands(users[0].expenses["other"], show_decimals=True) }
      - "user_expense_other": ${ comma_and_list(set(users[0].expenses.keys()).difference(expenses_on_form)) }
      - "user_expense_total": ${ thousands(users[0].expenses.total(), show_decimals=True) }
      - "user_income_net": ${ thousands(user_income_net, show_decimals=True) }
      - "user_owns_home_yes": ${ user_owns_home }
      - "user_owns_home_no": ${ not user_owns_home }
      - "user_home_value": ${ thousands(user_home_value, show_decimals=True) }
      - "user_home_debt": ${ thousands(user_home_debt, show_decimals=True) }
      - "user_owns_car_yes": ${ user_owns_car }
      - "user_owns_car_no": ${ not user_owns_car }
      - "user_car_year": ${ user_car_year }
      - "user_car_make": ${ user_car_make }
      - "user_car_value": ${ thousands(user_car_value, show_decimals=True) }
      - "user_car_debt": ${ thousands(user_car_debt, show_decimals=True) }
      - "user_accounts_balance": ${ comma_and_list([currency(ac.balance) for ac in users[0].accounts], comma_string=',\n', and_string=',\n') }
      - "user_accounts_type": ${ list_accounts(users[0].accounts) }
      - "user_property_type": ${ user_property_type if user_owns_property else "" }
      - "user_property_value": ${ user_property_value if user_owns_property else "" }
      - "user_debts": ${ thousands(user_debts, show_decimals=True) }
      - "miscellaneous_facts": ${ miscellaneous_facts }
      - "users1_signature": ${ users[0].signature_if_final(i) }
      - "users1_address_line_one": ${ users[0].address.line_one() }
      - "users1_address_city": ${ users[0].address.city }
      - "users1_address_state": ${ users[0].address.state }
      - "users1_address_zip": ${ users[0].address.zip }
      - "signature_date": ${ signature_date }
