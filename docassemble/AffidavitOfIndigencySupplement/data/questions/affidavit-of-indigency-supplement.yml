---
id: interview_order_Affidavit_to_Indigency_Supplement0027
code: |
  # This is a placeholder to control logic flow in this interview
  # It was generated from interview_generator.py as an 'interview order' type question.
  basic_questions_intro_screen 
  Affidavit_to_Indigency_Supplement0027_intro
  # Set the preferred/allowed courts for this interview
  preferred_court = interview_metadata["Affidavit_to_Indigency_Supplement0027"]["preferred court"]
  allowed_courts = interview_metadata["Affidavit_to_Indigency_Supplement0027"]["allowed courts"]
  user_role = "plaintiff"
  case_number

  users[0].grade_school_completed
  users[0].training
  users[0].disabilities
  users[0].dependents_number
  users[0].jobs.gather()
  jobs_description
  users[0].nonemployment.gather()
  jobs_description
  nonemployment_description
  users[0].income_gross_monthly
  users[0].tax_total
  users[0].income_after_tax
  if users[0].has_fixed_expenses:
    users[0].expense_rent
    users[0].expense_electricity
    users[0].expense_oil
    users[0].expense_gas
    users[0].expense_water
  else:
    users[0].expense_rent = 0
    users[0].expense_electricity = 0
    users[0].expense_oil = 0
    users[0].expense_gas = 0
    users[0].expense_water = 0
  if users[0].has_variable_expenses:
    users[0].expense_food
    users[0].expense_clothing
    users[0].expense_laundry
    users[0].expense_telephone
  else:
    users[0].expense_food = 0
    users[0].expense_clothing = 0
    users[0].expense_laundry = 0
    users[0].expense_telephone = 0    
  if users[0].has_health_expenses:
    users[0].expense_uninsured_medical
    users[0].expense_health_insurance
  else: 
    users[0].expense_uninsured_medical = 0
    users[0].expense_health_insurance = 0
  if users[0].has_transport_expenses:
    users[0].expense_car_insurance
    users[0].expense_transportation
  else:
    users[0].expense_car_insurance = 0
    users[0].expense_transportation = 0
  if users[0].has_child_expenses:
    users[0].expense_childcare
    users[0].expense_child_support
    users[0].expense_education
  else:
    users[0].expense_childcare = 0
    users[0].expense_child_support = 0
    users[0].expense_education = 0
  users[0].expense_total
  users[0].income_net
  if users[0].expense_other_yes:
    users[0].expense_other
    users[0].expense_other_amount
  else:
    users[0].expense_other = 'No Other Expenses'
    users[0].expense_other_amount = '0'
  users[0].household.gather()
  household_description
  users[0].tax_federal
  users[0].owns_home_yes
  users[0].owns_car_yes
  if not users[0].unpaid_debts_yes: 
    users[0].debts = 'No Debts'
  users[0].checking
  users[0].savings
  users[0].account.gather() 
  account_description
  users[0].property_type
  users[0].miscellaneous_facts
  users[0].name_print

  str(courts[0])
  str(users[0])
  users[0].address.on_one_line()
  users[0].birthdate.format()
  users[0].address.address
  users[0].address.city
  users[0].address.state
  users[0].address.zip
  signature_date
  # By default, we'll mark any un-filled fields as DAEmpty(). This helps avoid errors if you intentionally hide a logic branch or mark a question not required
  # Comment out the line below if you don't want this behavior. 
  mark_unfilled_fields_empty(interview_metadata["Affidavit_to_Indigency_Supplement0027"])
  Affidavit_to_Indigency_Supplement0027_preview_question # Pre-canned preview screen
  basic_questions_signature_flow
  users[0].signature
  Affidavit_to_Indigency_Supplement0027 = True
---
id: objects
objects: 
  - users[0].household: DAList.using(object_type=Person)
  - users[0].account: DAList.using(object_type=Thing)
---
id: job list collect
question: |
   Describe your job.
fields:
  - Occupation: users[0].jobs[i].occupation
  - Employer Name: users[0].jobs[i].name.text
  - Employer Address: users[0].jobs[i].employer_address
    address autocomplete: True
  - Income from the last 12 months: users[0].jobs[i].income_amount
    datatype: currency
    min: 0
    default: 0
  - Federal tax: users[0].jobs[i].tax_federal
    datatype: currency
    min: 0
    default: 0
  - State tax: users[0].jobs[i].tax_state
    datatype: currency
    min: 0
    default: 0
  - Social security tax: users[0].jobs[i].tax_social_security
    datatype: currency
    min: 0
    default: 0
  - Medicare tax: users[0].jobs[i].tax_medicare
    datatype: currency
    min: 0
    default: 0
  - Do you have other taxes?: users[0].jobs[i].tax_other_yes
    datatype: yesnoradio
  - Other: users[0].jobs[i].tax_other
    show if: users[0].jobs[i].tax_other_yes
  - Other tax amount: users[0].jobs[i].tax_other_amount
    show if: users[0].jobs[i].tax_other_yes
    datatype: currency
    min: 0
    default: 0
list collect: True
---
# uses dropdown with nonemployment sources of income list collect
id: nonemployment income list collect
question: |
  Sources of income, if not from employment.
subquestion: |
  What did you receive in the last 12 months?
fields:
  - Type of income: users[0].nonemployment[i].name.text
    input type: combobox
    choices:
      - royalties
      - rental income
      - interest
      - dividends
      - trusts
      - annuities
      - pensions
      - retirement
      - workers comp
      - private disability insurance
      - child support
      - alimony
      - contributions
  - Amount: users[0].nonemployment[i].income_amount
    datatype: currency
    min: 0
    default: 0
list collect: True
---
# sets the content for the pdf text areas
code: |
  jobs_description = comma_and_list([job.occupation + ", " + job.name.text + ", " + job.employer_address + "\r" for job in users[0].jobs])
  nonemployment_description = comma_and_list([other.name.text + "\r" for other in users[0].nonemployment])
---
# for loop for income and taxes, calculations gross annual for each
code: |
  users[0].income_jobs_gross_annual = 0
  users[0].tax_gross_annual = 0
  users[0].tax_gross_annual_federal = 0
  users[0].tax_gross_annual_state = 0
  users[0].tax_gross_annual_social_security = 0
  users[0].tax_gross_annual_medicare = 0
  users[0].tax_gross_annual_other = 0
  for jobs in users[0].jobs:
    users[0].income_jobs_gross_annual = users[0].income_jobs_gross_annual + jobs.income_amount
    users[0].tax_gross_annual_federal = users[0].tax_gross_annual_federal + jobs.tax_federal
    users[0].tax_gross_annual_state = users[0].tax_gross_annual_state + jobs.tax_state
    users[0].tax_gross_annual_social_security = users[0].tax_gross_annual_social_security + jobs.tax_social_security
    users[0].tax_gross_annual_medicare = users[0].tax_gross_annual_medicare + jobs.tax_medicare
    users[0].tax_gross_annual_other = users[0].tax_gross_annual_other + jobs.tax_other_amount
---
# for loop nonemployment income
code: |
  users[0].income_other_gross_annual = 0
  for other in users[0].nonemployment:
    users[0].income_other_gross_annual = users[0].income_other_gross_annual + other.income_amount
---
# calculations for monthly gross income and monthly tax deductions: annual / 12
code: |
  users[0].income_gross_annual = users[0].income_jobs_gross_annual + users[0].income_other_gross_annual
  users[0].income_gross_monthly = users[0].income_gross_annual / 12
  users[0].tax_federal = users[0].tax_gross_annual_federal / 12
  users[0].tax_state = users[0].tax_gross_annual_state / 12
  users[0].tax_social_security = users[0].tax_gross_annual_social_security /12
  users[0].tax_medicare = users[0].tax_gross_annual_medicare / 12
  users[0].tax_other_amount = users[0].tax_gross_annual_other / 12
  users[0].tax_total = users[0].tax_federal + users[0].tax_state + users[0].tax_social_security + users[0].tax_medicare + users[0].tax_other_amount